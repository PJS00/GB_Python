# Коллекции данных. Профилирование и отладка
# Коллекция — структура данных, которая создана, чтобы содержать в себе
# некоторое количество объектов (они могут быть одного типа или могут быть
# разных типов).
# В коллекции хранится множество данных. Они могут быть разных типов.

# Список - это упорядоченный конечный набор элементов. Давайте разбираться, по
# сути список - это тот же самый массив, в котором можно хранить элементы любых
# типов данных.

# list_1 = [] # Создание пустого списка
# list_2 = list() # Создание пустого списка
# list_1 = [7, 9, 11, 13, 15, 17]
# print(list_1) # выводит [7, 9, 11, 13, 15, 17]
# print(*list_1) # * - распаковка списка, убирает знаки, выводит 7 9 11 13 15 17

# for i in list_1:
#     print(i)
# цикл for выводит 
# 7
# 9
# 11
# 13
# 15
# 17

# print(len(list_1)) # 6, выводит количество элементов в списке

# В списках существует нумерация, которая начинается с 0, чтобы вывести первый
# элемент списка воспользуемся следующей конструкцией:
# print(list_1[0]) # 7
# print(list_1[-1]) # 17, индексация с конца

# Добавление элемента в список
# list_1 = [7, 9, 11, 13, 15, 17]
# print(list_1)
# list_1.append(8) # append добавляет элемент в конец списка
# print(list_1)

# list_1 = [] # пустой список
# print(list_1)
# for i in range(5): # перебор списка от 0 до 4
#     list_1.append(i) # при каждой иттерации в список будет добаляться i
#     print(list_1)

# Можно список заполнять не только при его создание, но и во время работы
# программы:
# list_1 = list() # создание пустого списка
# for i in range(5): # цикл выполнится 5 раз
#     n = int(input()) # пользователь вводит целое число
#     list_1.append(n) # сохранение элемента в конец списка
# # 1-я итерация цикла(повторение 1): n = 12, list_1 = [12]
# # 2-я итерация цикла(повторение 2): n = 7, list_1 = [12, 7]
# # 3-я итерация цикла(повторение 3): n = -1, list_1 = [12, 7, -1]
# # 4-я итерация цикла(повторение 4): n = 21, list_1 = [12, 7, -1, 21]
# # 5-я итерация цикла(повторение 5): n = 0, list_1 = [12, 7, -1, 21, 0]
# print(list_1) # [12, 7, -1, 21, 0]

# Взаимодействие цикла for со списком:
# list_1 = [12, 7, -1, 21, 0]
# for i in list_1:
#     print(i) # вывод каждого элемента списка
# 1-я итерация цикла(повторение 1): i = 12
# 2-я итерация цикла(повторение 2): i = 7
# 3-я итерация цикла(повторение 3): i = -1
# 4-я итерация цикла(повторение 4): i = 21
# 5-я итерация цикла(повторение 5): i = 0

# Не забываем, что у списка есть нумерация:
# list_1 = [12, 7, -1, 21, 0]
# for i in range(len(list_1)):
#     print(list_1[i]) # вывод каждого элемента списка
# 1-я итерация цикла(повторение 1): list_1[0] = 12
# 2-я итерация цикла(повторение 2): list_1[1] = 7
# 3-я итерация цикла(повторение 3): list_1[2] = -1
# 4-я итерация цикла(повторение 4): list_1[3] = 21
# 5-я итерация цикла(повторение 5): list_1[4] = 0

# Удаление последнего элемента списка
# Метод pop удаляет последний элемент из списка:
# list_1 = [12, 7, -1, 21, 0]
# a = list_1.pop()
# print(a) # 0 или так: print(list_1.pop())
# print(list_1) # [12, 7, -1, 21]
# print(list_1.pop()) # 21
# print(list_1) # [12, 7, -1]
# print(list_1.pop()) # -1
# print(list_1) # [12, 7]

# Удаление конкретного элемента из списка.
# Надо указать значение индекса в качестве аргумента функции pop:
# list_1 = [12, 7, -1, 21, 0]
# print(list_1.pop(0)) # 12 указали индекс элемента 0
# print(list_1) # [7, -1, 21, 0]

# Добавление элемента на нужную позицию.
# Функция insert — указание индекса (позиции) и значения.
# list_1 = [12, 7, -1, 21, 0]
# print(list_1.insert(2, 11)) # указываем два аргумента: 2 - позиция, 11 - значение
# print(list_1) # [12, 7, 11, -1, 21, 0]

# Срез списка
# list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# print(list_1[0]) # 1
# print(list_1[1]) # 2
# print(list_1[len(list_1)-1]) # 10
# print(list_1[-5]) # 6
# print(list_1[:]) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# # перед : пусто, начинать сначала
# # после : пусто, проходить список до конца
# # число после :, до второго индекса в списке, не включает последнюю позицию
# print(list_1[:2]) # [1, 2]
# print(list_1[len(list_1)-2:]) #[9, 10]
# print(list_1[2:9]) # [3, 4, 5, 6, 7, 8, 9]
# print(list_1[6:-18]) # []
# print(list_1[0:len(list_1):6]) # [1, 7]
# print(list_1[::6]) # [1, 7]

# Кортежи
# Кортеж — это то же самое, что и список, который мы не можем изменять.
# Тогда для чего нужны кортежи, если их нельзя изменить? В случае защиты
# каких-либо данных от изменений (намеренных или случайных).
# Кортеж занимает меньше места в памяти и работают быстрее, по сравнению со списками
# t = () # создание пустого кортежа, тип неизменяемый список tuple
# print(type(t)) # class <'tuple'>
# t = (1) # выведет class <'int'>
# print(type(t))
# t = (1, ) # поэтому в конце ставим запятую
# print(type(t))
# t = (28, 9, 1990)
# print(type(t))
# colors = ['red', 'green', 'blue']
# print(colors) # ['red', 'green', 'blue']
# t = tuple(colors)
# print(t) # ('red', 'green', 'blue')
# t = tuple(['red', 'green', 'blue'])
# print(t[0]) # red
# print(t[2]) # blue
# for e in t:
#     print(e) # red green blue
# t[0] = 'black' # TypeError: 'tuple' object does not support(нельзя изменять
# кортеж)

# Преобразование списка в кортеж
# v = [1, 8, 9]
# print(v)
# print(type(v)) # выводит [1, 8, 9]

# v = tuple(v)
# print(v)
# print(type(v)) # выводит (1, 8, 9)

# a = 1
# b = 2
# # проще записать
# a, b = 1, 2 # множественное присваивание
# a = b = 1

# a, b, c = v
# print(a, b, c) # выводит 1 8 9

# t = (1, 2, 3, 5,)

# print(t[1]) # вывод конкретного элемента кортежа
# for i in t:
#     print(i) # выводит все элементы по очереди

# for i in range(len(t)):
#     print(t[i]) # выводит все элементы по очереди

# изменене элемента
# t = (1, 2, 3, 5,)
# t = [1, 2, 3, 5,]
# t[0] = 2 # TypeError: 'tuple' object does not support item assignment
# # нужно указать список в []
# print(t)

# Словари

# В списках в качестве ключа используется индекс элемента. В словаре для
# определения элемента используется значение ключа (строка, число).
# d = {} # создание пустого словаря
# d = dict() # тоже создание пустого словаря

# d['q'] = 'qwerty' # в [] указывается ключ, после = значение
# print(d)
# # Если в словаре мы обратимсЯ по ключу q, мы получим qwerty.
# d['w'] = 'werty'
# print(d) # выводит словарь {'q': 'qwerty', 'w': 'werty'}
# print(d['q']) # в [] указываем ключ, по котором выводить значения, выводит qwerty

# Пример
# dictionary ={'up': '↑', 'left': '←', 'down': '↓', 'right': '→'}
# print(dictionary) # {'up':'↑', 'left':'←', 'down':'↓', 'right':'→'}
# print(dictionary['left']) # ←
# # типы ключей могут отличаться
# print(dictionary['up']) # ↑
# # типы ключей могут отличаться
# dictionary['left'] = '⇐'
# print(dictionary['left']) # ⇐

# # Если захотим вывести значение, которого нет в нашем словаре, выдаст ошибку.
# print(dictionary['type']) # KeyError: 'type'

# del dictionary['left'] # del удаление элемента, удаляем ключ left
# for item in dictionary: # for (k,v) in dictionary.items():
#     print('{}: {}'.format(item, dictionary[item])) # выводятся ключ-значение
#     print(item) # выводятся ключи
# for (k,v) in dictionary.items():
#     print(k, v)
# up: ↑
# down: ↓
# right: →

# print(dictionary.items())
# выводит dict_items([('up', '↑'), ('left', '←'), ('down', '↓'), ('right', '→')])
# где элемент ('up', '↑'), 'up' - ключ, '↑' - значение

# Множества
# Множества содержат в себе !уникальные элементы, не обязательно упорядоченные.
# Одно множество может содержать значения любых типов. Если у Вас есть два
# множества, Вы можете совершать над ними любые стандартные операции,
# например, объединение, пересечение и разность.

# colors = {'red', 'green', 'blue'} # в словаре записываются ключ и значение через :, здась просто перечисление
# print(colors) # {'red', 'green', 'blue'}

# colors.add('red') # при добавление такого же элемента в множество повторно, ничего не изменится, в множестве уникальные элементы
# print(colors) # {'red', 'green', 'blue'}
# colors.add('gray') # добавление уникального элемента, может добавиться в любое место множества
# print(colors) # {'red', 'green', 'blue','gray'}
# colors.remove('red') # удаление элемента
# print(colors) # {'green', 'blue','gray'}
# # colors.remove('red') # KeyError: 'red', будет ошибка, т.к. red до этого уже удалили
# colors.discard('red') # ok, функция discard проверяет, есть ли значение
# # в множестве. Если значение есть, она его удаляет,
# # если нет - пропускает строку и не выдает ошибку
# print(colors) # {'green', 'blue','gray'}
# colors.clear() # { } удаляет все значения из нашего множества
# print(colors) # set()
# q = set() # создание пустого множества

# Операции со множествами в Python
# a = {1, 2, 3, 5, 8}
# b = {2, 5, 8, 13, 21}
# c = a.copy() # копирование множества, в с скопировали множество а: c = {1, 2, 3, 5, 8}
# u = a.union(b) # объединение, создали множество, в котором содержатся
# # уникальные элементы из множеств а и b: u = {1, 2, 3, 5, 8, 13, 21}
# i = a.intersection(b) # пересечение, те элементы, которые содержатся
# # во множествах а и b: i = {8, 2, 5}
# dl = a.difference(b) # разность, из множества а убираем все значения,
# # которые есть в множестве b: dl = {1, 3}
# dr = b.difference(a) # разность, из множества b убираем все значения,
# # которые есть в множестве A: dr = {13, 21}
# q=a.union(b).difference(a.intersection(b)) # выводит {1, 21, 3, 13}
# # сначала выполняем a.intersection(b), пересечение множеств
# # потом по порядку a.union(b).difference, a объединяем с b,
# # из полученного множества находим разность с ранее полученным пересечением

# Неизменяемое или замороженное множество(frozenset) — множество, с которым
# не будут работать методы удаления и добавления.
# a = {1, 2, 3, 5, 8}
# b = frozenset(a) # замороженое множество мы не можем менять
# print(b) # frozenset({1, 2, 3, 5, 8})


# List Comprehension
# У каждого языка программирования есть свои особенности и преимущества. Одна
# из культовых фишек Python — list comprehension (редко переводится на 
# русский, но можно использовать определение «генератора списка»). Comprehension легко читать, и их используют как начинающие,
# так и опытные разработчики.

# List comprehension — это упрощенный подход к созданию списка, который
# задействует цикл for, а также инструкции if-else для определения того,
# что в итоге окажется в финальном списке.

# Простая ситуация — список:
# list_1 = [exp for item in iterable]
# Выборка по заданному условию:
# list_1 = [exp for item in iterable (if conditional)]

# Задача: Создать список, состоящий из четных чисел в диапазоне от 1 до 100.
# Решение:
# Простое решение через цикл for
# list_1 = []
# for i in range(1, 101):
#     list_1.append(i)
# print(list_1) # [1, 2, 3,..., 100]

# Эту же функцию можно записать так:
# list_1 = [i for i in range(1, 101)] # [1, 2, 3,..., 100]
# print(list_1)

# выборка по условиям
# Добавить условие (только чётные числа)
# list_1 = [i for i in range(1, 101) if i % 2 == 0] # [2, 4, 6,..., 100]
# print(list_1)

# Допустим, вы решили создать пары каждому из чисел (кортежи)
# list_1 = [(i, i) for i in range(1, 101) if i % 2 == 0] # [(2, 2), (4, 4),..., (100, 100)]
# print(list_1)

# Также можно умножать, делить, прибавлять, вычитать. Например, умножить
# значение на 2.
# list_1 = [i * 2 for i in range(10) if i % 2 == 0]
# print(list_1) # [0, 4, 8, 12, 16]

# Профилирование и отладка
# Самые распространенные ошибки:
# 1. SyntaxError(Синтаксическая ошибка)
# number_first = 5
# number_second = 7
# if number_first > number_second  # !!!!! Забыли ':'
#     print(number_first)

# 2. IndentationError(Ошибка отступов)
# number_first = 5
# number_second = 7
# if number_first > number_second:
# print(number_first) # !!!!! Забыли про отступы

# 3. TypeError(Типовая ошибка)
# text = 'Python'
# number = 5 # неправильно
# number = '5' # можем написать как строку
# print(text + number) # Нельзя складывать строки и числа

# 4. ZeroDivisionError(Деление на 0)
# number_first = 5
# number_second = 0
# print(number_first // number_second) # Делить на 0 нельзя

# 5. KeyError(Ошибка ключа)
# dictionary = {1: 'Monday', 2: 'Tuesday'}
# print(dictionary[3]) # Такого ключа не существует

# 6. NameError(Ошибка имени переменной)
# name = 'Ivan'
# print(names) # Переменной names не существует

# 7. ValueError(Ошибка значения)
# text = 'Python'
# print(int(text)) # Нельзя символы перевести в целые значения