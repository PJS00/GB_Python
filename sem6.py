# Задача №35. Решение в группах
# Напишите функцию, которая принимает одно число и 
# проверяет, является ли оно простым
# Напоминание: Простое число - это число, которое 
# имеет 2 делителя: 1  и n(само число)
# Input: 5
# Output: yes

# def prime_num (n):
#     k = 0
#     for i in range(2, n // 2 + 1):
#         if (n % i == 0):
#             k = k+1
#     if (k <= 0):
#         return True
#     return False

# print(prime_num(int(input("Введите число: "))))

# Задача
# определить полиндром введеное слово или нет через рекурсию

# какая-то фигня
## word = 'abc'
## print(word[0])
## print(word[-1])
# def pal_word(word, start, end):
#     if len(word) == 1:
#         return True
#     if start >= (len(word) / 2):
#         return True
#     if word[start] == word[end]:
#         return pal_word(word, start + 1, end - 1)
#     return False

# print(pal_word('abcdba', 0, -1))


# работающая фигня
# def pal_word(n):
#     if len(n) <= 1:
#         return True
#     if n[0] != n[-1]:
#         return False
#     return pal_word(n[1:-1])
# print(pal_word('abcfdcba'))

# Задача №39. Общее обсуждение
# Даны два массива чисел. Требуется вывести те элементы
# первого массива (в том порядке, в каком они идут в первом
# массиве), которых нет во втором массиве. Пользователь вводит
# число N - количество элементов в первом массиве, затем N
# чисел - элементы массива. Затем число M - количество
# элементов во втором массиве. Затем элементы второго массива
# Ввод: Вывод:
# 7 3 3 2 12
# 3 1 3 4 2 4 12
# 6
# 4 15 43 1 15 1 (каждое число вводится с новой строки)



# Задача №41. Решение в группах
# Дан массив, состоящий из целых чисел. Напишите
# программу, которая в данном массиве определит
# количество элементов, у которых два соседних и, при
# этом, оба соседних элемента меньше данного. Сначала
# вводится число N — количество элементов в массиве
# Далее записаны N чисел — элементы массива. Массив
# состоит из целых чисел.
# Ввод: Ввод:
# 5 5
# 1 2 3 4 5 1 5 1 5 1
# Вывод: Вывод:
# 0 2


# Задача №43. Решение в группах
# Дан список чисел. Посчитайте, сколько в нем пар
# элементов, равных друг другу. Считается, что любые
# два элемента, равные друг другу образуют одну пару,
# которую необходимо посчитать. Вводится список
# чисел. Все числа списка находятся на разных
# строках.
# Ввод: Вывод:
# 1 2 3 2 3 2


# Задача №45. Решение в группах
# Два различных натуральных числа n и m называются
# дружественными, если сумма делителей числа n
# (включая 1, но исключая само n) равна числу m и
# наоборот. Например, 220 и 284 – дружественные числа.
# По данному числу k выведите все пары дружественных
# чисел, каждое из которых не превосходит k. Программа
# получает на вход одно натуральное число k, не
# превосходящее 105. Программа должна вывести все
# пары дружественных чисел, каждое из которых не
# превосходит k. Пары необходимо выводить по одной в
# строке, разделяя пробелами. Каждая пара должна быть
# выведена только один раз (перестановка чисел новую
# пару не дает).
# Ввод: Вывод:
# 300 220 284
# Подсказка
# прогнать все числа от 0 до 300, список из кортежей (число и сумма делителей)
# k = 300
# a = []
# b = []
# for i in range(k):
#     summa = 0
#     for j in range(1, i // 2 + 1):
#         if i%j==0:
#             summa += j
#     if summa > 1:
#         a.append(summa)
#         b.append(i)
# # print(summa)
# # print(a)
# # print(b)

# for z in range(len(a)):
#     for y in range(z):
#         if a[z] == b[y] and b[z] == a[y]:
#             print(b[z], b[y])

# через кортежи
# n = int(input())
# list_1 = list()
# for i in range(n):
#     summa = 0
#     for j in range(1, i // 2 + 1):
#         if i % j == 0:
#             summa += j
#             list_1.append(tuple([i, summa]))
#     for i in range(len(list_1)):
#         for j in range(i, len(list_1)):
#             if i != j and list_1[i][0] == list_1[j][1] and list_1[i][1] == list_1[j][0]:
#                 print(*list_1[i])


# Задача 30: Заполните массив элементами арифметической
# прогрессии. Её первый элемент, разность и количество
# элементов нужно ввести с клавиатуры. Формула для
# получения n-го члена прогрессии: a
# n
#  = a1
#  + (n-1) * d.
# Каждое число вводится с новой строки.
# Ввод: 7 2 5
# Вывод: 7 9 11 13 15


# Задача 32: Определить индексы элементов массива (списка),
# значения которых принадлежат заданному диапазону (т.е. не
# меньше заданного минимума и не больше заданного
# максимума)
# Ввод: [-5, 9, 0, 3, -1, -2, 1,
# 4, -2, 10, 2, 0, -9, 8, 10, -9,
# 0, -5, -5, 7]
# Вывод: [1, 9, 13, 14, 19]